name: Run Unit Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    name: ${{ matrix.os }} - ${{ matrix.arch }} - ${{ matrix.compiler }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
#          - os: ubuntu-latest
#            compiler: gcc
#            cc: gcc
#            cxx: g++
#          - os: ubuntu-latest
#            compiler: clang
#            cc: clang
#            cxx: clang++
          - os: windows-2025
            arch: x64
            compiler: msvc
            cc: cl
            cxx: cl
          - os: macos-13
            arch: x64
            compiler: clang
            cc: /usr/local/opt/llvm@19/bin/clang
            cxx: /usr/local/opt/llvm@19/bin/clang++
          - os: macos-15
            arch: arm64
            compiler: clang
            cc: /opt/homebrew/opt/llvm@19/bin/clang
            cxx: /opt/homebrew/opt/llvm@19/bin/clang++

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Setup MSVC (Windows)
        uses: ilammy/msvc-dev-cmd@v1

      - name: Set environment variables
        run: |
          echo "CC=${{ matrix.cc }}" >> $GITHUB_ENV
          echo "CXX=${{ matrix.cxx }}" >> $GITHUB_ENV

      - name: Setup Vulkan
        uses: MrChampz/VulkanCI@1.4.313.0
        with:
          sdkVersion: 1.4.313.0

      - name: Install missing deps (Linux)
        run: sudo apt-get install libxkbcommon-x11-dev libxinerama-dev libxcursor-dev libxi-dev
        if: runner.os == 'Linux'

      - name: Install Clang (Apple)
        run: brew install llvm@19
        if: runner.os == 'macOS' && matrix.compiler == 'clang'

      - name: Set up CMake
        uses: jwlawson/actions-setup-cmake@v1

      - name: Create build directory
        run: cmake -E make_directory build

      - name: Configure with CMake
        working-directory: build
        run: cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release

      - name: Build tests
        working-directory: build
        run: cmake --build . --config Release

      - name: Vulkan driver test
        run: |
          $dir = Split-Path $env:VK_DRIVER_FILES -Parent
          Copy-Item "$dir\vk_swiftshader.dll" "D:\a\Elixir\Elixir\build\Elixir\Tests\vulkan-1.dll"
          ls "D:\a\Elixir\Elixir\build\Elixir\Tests"
        if: runner.os == 'Windows'

      - name: Run tests
        working-directory: build
        run: ctest --output-on-failure --verbose -C Release
